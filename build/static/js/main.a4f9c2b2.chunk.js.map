{"version":3,"sources":["logo.svg","component/options-pane.jsx","component/axis-y.jsx","component/axis-x.jsx","component/tool/brush-tool.jsx","component/lines.jsx","component/tool/zoom-tool.jsx","component/spectrum-chart.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","options","id","label","OptionsPane","_ref","onChangeOption","_useState","useState","zoom","brush","_useState2","Object","slicedToArray","option","setOption","react_default","a","createElement","className","ToggleButtonGroup","size","value","exclusive","onChange","event","selectedOption","ToggleButton","key","ZoomIn_default","CropFree_default","YAxis","width","height","margin","data","show","onAxisDidMount","axis","d3","ticks","tickFormat","scale","domain","arguments","length","undefined","array","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","d","concat","err","return","getDomain","bottom","top","getScale","useEffect","call","append","attr","left","text","transform","defaultProps","right","showGrid","XAxis","isFID","xAxis","grid","tickSize","refaxis","useRef","refgrid","current","transition","duration","Fragment","ref","BrushTool","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","brushEnd","selection","_d3$event$selection","x1","x2","range","invert","move","onDomainUpdate","reset","e","orign_domain","_this$props","extent","refs","prevProps","prevState","_this$props2","orignXDomain","isActive","on","onDoubleClick","Component","Lines","refPathsContainer","makePath","x","y","path","map","element","i","clipPath","stroke","color","ZoomTool","zoomed","t","rescaleX","state","scaleExtent","Infinity","translateExtent","SpectrumChart","_xDomain","setXDomain","_useState3","_useState4","_yDomain","setYDomain","_useState5","_useState6","_orignXDomain","setOriginalXDomain","_useState7","_useState8","_toolOption","setToolOption","brushUpdate","xDomain","style","options_pane","lines","axis_x","axis_y","yDomain","brush_tool","zoom_tool","App","objectSpread","isHover","json1","defineProperty","isFid","is2D","component_spectrum_chart","updateRange","console","log","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4f9c2b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState } from \"react\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport CropFree from \"@material-ui/icons/CropFree\";\r\nimport ZoomIn from \"@material-ui/icons/ZoomIn\";\r\n\r\n// const GreenRadio = withStyles({\r\n//   root: {\r\n//     color: green[400],\r\n//     \"&$checked\": {\r\n//       color: green[600]\r\n//     }\r\n//   },\r\n//   checked: {\r\n// })(props => <Radio color=\"default\" {...props} />);\r\n\r\nexport let options = {\r\n  zoom: { id: \"zoom\", label: \"Zoom\" },\r\n  brush: { id: \"brush\", label: \"Brush\" }\r\n};\r\n\r\nconst OptionsPane = ({onChangeOption}) => {\r\n  const [option, setOption] = useState({ zoom: false, brush: false });\r\n\r\n  const handleChange = (event, selectedOption) => {\r\n    setOption(selectedOption);\r\n    onChangeOption(selectedOption);\r\n  };\r\n\r\n  return (\r\n    <div className=\"option-container\">\r\n      <ToggleButtonGroup\r\n        size=\"small\"\r\n        value={option}\r\n        exclusive\r\n        onChange={handleChange}\r\n      >\r\n        <ToggleButton key={1} value={options.zoom.id}>\r\n          <ZoomIn />\r\n          <label>{options.zoom.label}</label>\r\n        </ToggleButton>\r\n\r\n        <ToggleButton key={2} value={options.brush.id}>\r\n          <CropFree />\r\n          <label>{options.brush.label}</label>\r\n        </ToggleButton>\r\n      </ToggleButtonGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OptionsPane;\r\n","import React, {useEffect } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst YAxis = ({ width, height, margin, data, show, label,onAxisDidMount }) => {\r\n\r\n  const axis = d3.axisLeft().ticks(10).tickFormat(d3.format(\"~s\"));;\r\n  const scale = getScale(data);\r\n\r\n\r\n  function getDomain(data = []) {\r\n    let array = [];\r\n    for (let d of data) {\r\n      array = array.concat(d[\"y\"]);\r\n    }\r\n    return d3.extent(array);\r\n  }\r\n\r\n   function getScale(data){\r\n    const domain = getDomain(data);\r\n\r\n    const scale = d3.scaleLinear(domain, [height - margin.bottom, margin.top]);\r\n\r\n    return scale;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (show) {\r\n      d3.select(\".y\")\r\n        .call(axis.scale(scale))\r\n        .append(\"text\")\r\n        .attr(\"fill\", \"#000\")\r\n        .attr(\"y\", -(margin.left - 5))\r\n        .attr(\"transform\", \"rotate(-90)\")\r\n        .attr(\"x\", -(margin.top + 20))\r\n        .attr(\"dy\", \"0.71em\")\r\n        .attr(\"text-anchor\", \"end\")\r\n        .text(label);\r\n    }\r\n\r\n    onAxisDidMount(scale.domain());\r\n\r\n  });\r\n \r\n  return ( (show) ? <g className=\"y axis\" transform={`translate(${margin.left},0)`} /> :null);\r\n}\r\n\r\n\r\nexport default YAxis;\r\n\r\n\r\nYAxis.propTypes = {\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  data: PropTypes.array.isRequired,\r\n  margin: PropTypes.shape({\r\n    top: PropTypes.number.isRequired,\r\n    right: PropTypes.number.isRequired,\r\n    bottom: PropTypes.number.isRequired,\r\n    left: PropTypes.number.isRequired\r\n  }),\r\n  showGrid: PropTypes.bool,\r\n  show:PropTypes.bool,\r\n  label: PropTypes.string,\r\n  onAxisDidMount: PropTypes.func\r\n};\r\n\r\nYAxis.defaultProps = {\r\n  width: 800,\r\n  height: 800,\r\n  data: [],\r\n  margin: { top: 40, right: 40, bottom: 40, left: 40 },\r\n  showGrid: false,\r\n  show:true,\r\n  label: \"\",\r\n  onAxisDidMount: () => {\r\n    return null;\r\n  }\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst XAxis = ({width,height,margin,data,domain,label,show,showGrid,isFID,onAxisDidMount}) => {\r\n\r\n  const xAxis = d3.axisBottom().ticks(10).tickFormat(d3.format(\"0\"));\r\n\r\n  const grid = d3\r\n    .axisBottom()\r\n    .ticks(20)\r\n    .tickSize(-(height - margin.top - margin.bottom))\r\n    .tickFormat(\"\");\r\n    \r\n  const scale = getScale(data);\r\n  const refaxis = useRef();\r\n  const refgrid = useRef();\r\n\r\n  label = (label) ? label: (isFID)?'δ [ppm]':'time [s]';\r\n\r\n  function getDomain(data = []) {\r\n    let array = [];\r\n\r\n    for (let d of data) {\r\n      array = array.concat(d[\"x\"]);\r\n    }\r\n    return d3.extent(array);\r\n  }\r\n\r\n  function getScale(data) {\r\n    const domain = getDomain(data);\r\n    const scale = d3.scaleLinear(domain, [margin.left, width - margin.right]);\r\n\r\n    return scale;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(show){\r\n    d3.select(refaxis.current)\r\n      .call(xAxis.scale(scale))\r\n      .append(\"text\")\r\n      .attr(\"fill\", \"black\")\r\n      .attr(\"y\", 20)\r\n      .attr(\"x\", width - 60)\r\n      .attr(\"dy\", \"0.71em\")\r\n      .attr(\"text-anchor\", \"end\")\r\n      .text(label);\r\n    //drwa grid at x axis\r\n    d3.select(refgrid.current).call(grid.scale(scale));\r\n    }\r\n\r\n    onAxisDidMount(scale.domain());\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n       if(show){\r\n      d3.select(refaxis.current)\r\n        .transition()\r\n        .duration(500)\r\n        .call(xAxis.scale(scale.domain(domain)));\r\n       }\r\n  }, [domain]);\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n       {show ? <g\r\n        className=\"x axis\"\r\n        transform={`translate(0,${height - margin.bottom})`}\r\n        ref={refaxis}\r\n      />:null}\r\n      {showGrid ? \r\n        <g\r\n          className=\"grid\"\r\n          ref={refgrid}\r\n          transform={`translate(0,${height - margin.bottom})`}\r\n        />\r\n       : \r\n      null\r\n      }\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default XAxis;\r\n\r\nXAxis.propTypes = {\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  data: PropTypes.array.isRequired,\r\n  margin: PropTypes.shape({\r\n    top: PropTypes.number.isRequired,\r\n    right: PropTypes.number.isRequired,\r\n    bottom: PropTypes.number.isRequired,\r\n    left: PropTypes.number.isRequired\r\n  }),\r\n  showGrid: PropTypes.bool,\r\n  show:PropTypes.bool,\r\n  label: PropTypes.string,\r\n  isFID :PropTypes.bool,\r\n  onAxisDidMount: PropTypes.func\r\n};\r\n\r\nXAxis.defaultProps = {\r\n  width: 800,\r\n  height: 800,\r\n  data: [],\r\n  margin: { top: 40, right: 40, bottom: 40, left: 40 },\r\n  showGrid: false,\r\n  show:true,\r\n  label: \"\",\r\n  isFID:true,\r\n  onAxisDidMount: () => {\r\n    return null;\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass BrushTool extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { width, height, margin, data, domain } = this.props;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.margin = margin;\r\n    this.data = data;\r\n    this.domain = domain;\r\n    this.orign_domain = domain;\r\n\r\n    this.brush = d3\r\n      .brushX()\r\n      .extent([\r\n        [margin.left, margin.top],\r\n        [width - margin.right, height - margin.bottom]\r\n      ]);\r\n  }\r\n\r\n  componentDidMount() {\r\n    d3.select(this.refs.brush).call(this.brush);\r\n  }\r\n\r\n  brushEnd = () => {\r\n    // if (d3.event.sourceEvent && d3.event.sourceEvent.type === \"zoom\") return; // ignore brush-by-zoom\r\n\r\n    if (!d3.event.selection) {\r\n      return;\r\n    }\r\n    const [x1, x2] = d3.event.selection;\r\n    const scale = d3.scaleLinear(this.domain, [\r\n      this.margin.left,\r\n      this.width - this.margin.right\r\n    ]);\r\n\r\n    const range = [scale.invert(x1), scale.invert(x2)];\r\n    d3.select(\".brush\").call(this.brush.move, null); // This remove the grey brush area as soon as the selection has been done\r\n\r\n    this.props.onDomainUpdate(range);\r\n  };\r\n\r\n  reset = e => {\r\n    this.props.onDomainUpdate(this.orign_domain);\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { domain, orignXDomain, isActive } = this.props;\r\n    this.domain = domain;\r\n    this.orign_domain = orignXDomain;\r\n\r\n    if (isActive) {\r\n      this.brush.on(\"end\", this.brushEnd);\r\n    } else {\r\n      this.brush.on(\"end\", null);\r\n    }\r\n  }\r\n  \r\n\r\n  render() {\r\n    const {isActive}  = this.props;\r\n\r\n    return <g className={(isActive)?'brush-conatiner brush ':'brush-conatiner'} onDoubleClick={this.reset}  ref=\"brush\" />;\r\n  }\r\n}\r\n\r\nexport default BrushTool;\r\n\r\nBrushTool.propTypes = {\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  data: PropTypes.array.isRequired,\r\n  margin: PropTypes.shape({\r\n    top: PropTypes.number.isRequired,\r\n    right: PropTypes.number.isRequired,\r\n    bottom: PropTypes.number.isRequired,\r\n    left: PropTypes.number.isRequired\r\n  }),\r\n  domain: PropTypes.array.isRequired,\r\n  orign_domain: PropTypes.array.isRequired,\r\n  showGrid: PropTypes.bool,\r\n  onDomainUpdate: PropTypes.func\r\n};\r\n\r\nBrushTool.defaultProps = {\r\n  width: 800,\r\n  height: 800,\r\n  data: [],\r\n  margin: { top: 40, right: 40, bottom: 40, left: 40 },\r\n  domain: [],\r\n  orign_domain: [],\r\n  showGrid: false,\r\n  onDomainUpdate: () => {\r\n    return [];\r\n  }\r\n};\r\n","import React, {useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Lines =({ width, height, margin, data,domain }) =>{\r\n  // const {_data,setData} = useState(data);\r\n  // const {_domain,setDomain} =domain(domain);\r\n\r\n  const refPathsContainer = useRef();\r\n\r\n  function makePath(data) {\r\n    const scale = getScale(domain);\r\n    let path = `M ${scale.x(data.x[0])} ${scale.y(data.y[0])}`;\r\n    path += data.x.map((element, i) => {\r\n      return ` L ${scale.x(element)} ${scale.y(data.y[i])}`;\r\n    });\r\n\r\n    return path;\r\n  }\r\n\r\n  function getScale (domain ) {\r\n    const x = d3.scaleLinear(domain.x, [\r\n      margin.left,\r\n      width - margin.right\r\n    ]);\r\n\r\n    const y = d3.scaleLinear(domain.y, [\r\n      height - margin.bottom,\r\n      margin.top\r\n    ]);\r\n\r\n    return { x, y };\r\n  };\r\n\r\n  function generatePaths() {\r\n    return data.map((d, i) => {\r\n      return (\r\n        <path\r\n          className=\"line\"\r\n          key={d.id}\r\n          stroke={d.color}\r\n          d={makePath(d)}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <defs>\r\n          <clipPath id=\"clip\">\r\n            <rect\r\n              width={`${width - margin.left - margin.right}`}\r\n              height={`${height - margin.top - margin.bottom}`}\r\n              x={`${margin.left}`}\r\n              y={`${margin.top}`}\r\n            />\r\n          </clipPath>\r\n        </defs>\r\n\r\n        <g className=\"paths\" ref={refPathsContainer} clipPath=\"url(#clip)\">\r\n          {generatePaths()}\r\n        </g>\r\n      </React.Fragment>\r\n    );\r\n\r\n  }\r\n\r\nexport default Lines;\r\n\r\nLines.propTypes = {\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  data: PropTypes.array.isRequired,\r\n  margin: PropTypes.shape({\r\n    top: PropTypes.number.isRequired,\r\n    right: PropTypes.number.isRequired,\r\n    bottom: PropTypes.number.isRequired,\r\n    left: PropTypes.number.isRequired\r\n  }),\r\n  domain: PropTypes.shape({\r\n    x: PropTypes.array.isRequired,\r\n    y: PropTypes.array.isRequired\r\n  })\r\n};\r\n\r\nLines.defaultProps = {\r\n  width: 800,\r\n  height: 800,\r\n  data: [],\r\n  margin: { top: 40, right: 40, bottom: 40, left: 40 },\r\n  domain: { x: 0, y: 0 }\r\n};\r\n","import React, { Component } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass ZoomTool extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isActive: false\r\n    };\r\n    const { width, height, margin, data, domain } = this.props;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.margin = margin;\r\n    this.data = data;\r\n    this.domain = domain;\r\n    this.orign_domain = domain;\r\n\r\n    this.zoom = d3\r\n      .zoom()\r\n      .scaleExtent([1, Infinity])\r\n      .translateExtent([\r\n        [margin.left, margin.top],\r\n        [width - margin.right, height - margin.bottom]\r\n      ])\r\n      .extent([\r\n        [margin.left, margin.top],\r\n        [width - margin.right, height - margin.bottom]\r\n      ]);\r\n  }\r\n\r\n  componentDidMount() {\r\n    d3.select(this.refs.zoom)\r\n      .append(\"rect\")\r\n      .attr(\"width\", this.width - this.margin.right - this.margin.left)\r\n      .attr(\"height\", this.height - this.margin.bottom - this.margin.top)\r\n      .attr(\r\n        \"transform\",\r\n        \"translate(\" + this.margin.left + \",\" + this.margin.top + \")\"\r\n      )\r\n      .call(this.zoom);\r\n  }\r\n\r\n  zoomed = () => {\r\n    // if (d3.event.sourceEvent && d3.event.sourceEvent.type === \"brush\") return; // ignore zoom-by-brush\r\n    let t = d3.event.transform;\r\n    const scale = d3.scaleLinear(this.orign_domain, [\r\n      this.margin.left,\r\n      this.width - this.margin.right\r\n    ]);\r\n\r\n    const domain = t.rescaleX(scale).domain();\r\n    this.props.onDomainUpdate(domain);\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { domain, orignXDomain, isActive } = this.props;\r\n    this.domain = domain;\r\n    this.orign_domain = orignXDomain;\r\n\r\n    if (isActive) {\r\n      this.zoom.on(\"zoom\", this.zoomed);\r\n    } else {\r\n      this.zoom.on(\"zoom\", null);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    const {isActive}  = this.props;\r\n    return <g className={(isActive)?'zoom-container zoom ':'zoom-container'}onDoubleClick={this.reset}  ref=\"zoom\" />;\r\n  }\r\n}\r\n\r\nexport default ZoomTool;\r\n\r\nZoomTool.propTypes = {\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  data: PropTypes.array.isRequired,\r\n  margin: PropTypes.shape({\r\n    top: PropTypes.number.isRequired,\r\n    right: PropTypes.number.isRequired,\r\n    bottom: PropTypes.number.isRequired,\r\n    left: PropTypes.number.isRequired\r\n  }),\r\n  domain: PropTypes.array.isRequired,\r\n  orign_domain: PropTypes.array.isRequired,\r\n  onDomainUpdate: PropTypes.func,\r\n  isActive: PropTypes.bool\r\n};\r\n\r\nZoomTool.defaultProps = {\r\n  width: 800,\r\n  height: 800,\r\n  data: [],\r\n  margin: { top: 40, right: 40, bottom: 40, left: 40 },\r\n  domain: [],\r\n  orign_domain: [],\r\n  onDomainUpdate: () => {\r\n    return [];\r\n  },\r\n  isActive: false\r\n};\r\n","import React, {useState } from \"react\";\r\nimport \"./css/spectrum-chart.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport OptionsPane, { options } from \"./options-pane\";\r\nimport YAxis from \"./axis-y\";\r\nimport XAxis from \"./axis-x\";\r\nimport BrushTool from \"./tool/brush-tool\";\r\nimport Lines from \"./lines\";\r\nimport ZoomTool from \"./tool/zoom-tool\";\r\n\r\nconst SpectrumChart = ({ margin, width, height, data }) => {\r\n\r\n  const [_xDomain, setXDomain] = useState(0);\r\n  const [_yDomain, setYDomain] = useState(0);\r\n  const [_orignXDomain, setOriginalXDomain] = useState([]);\r\n  const [_toolOption, setToolOption] = useState({ brush: false, zoom: false });\r\n\r\n  const handleChangeOption = option => {\r\n    if (option === options.brush.id) {\r\n      setToolOption({ brush: true, zoom: false });\r\n    } else if (option === options.zoom.id) {\r\n      setToolOption({ brush: false, zoom: true });\r\n    } else {\r\n      setToolOption({ brush: false, zoom: false });\r\n    }\r\n  };\r\n\r\n  const brushUpdate = xDomain => {\r\n    setXDomain(xDomain);\r\n  };\r\n\r\n  const handleXAxisDidMount = xDomain => {\r\n    setXDomain(xDomain);\r\n    setOriginalXDomain(xDomain);\r\n  };\r\n\r\n  const handleYAxisDidMount = yDomain => {\r\n    setYDomain(yDomain);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-container\" style={{ width: `${width}px` }}>\r\n      <div>\r\n        <OptionsPane onChangeOption={handleChangeOption} />\r\n      </div>\r\n      <div>\r\n        <svg width={width} height={height}>\r\n          {(_xDomain, _yDomain) ? (\r\n            <Lines\r\n              margin={margin}\r\n              width={width}\r\n              height={height}\r\n              data={data}\r\n              domain={{ x: _xDomain, y: _yDomain }}\r\n            />\r\n          ) : null}\r\n\r\n          <g className=\"container\">\r\n            <XAxis\r\n              onAxisDidMount={handleXAxisDidMount}\r\n              margin={margin}\r\n              width={width}\r\n              height={height}\r\n              data={data}\r\n              domain={_xDomain}\r\n              showGrid={true}\r\n              isFID={true}\r\n            />\r\n\r\n            <YAxis\r\n              onAxisDidMount={handleYAxisDidMount}\r\n              margin={margin}\r\n              width={width}\r\n              height={height}\r\n              data={data}\r\n              label=\"PPM\"\r\n              show={false}\r\n            />\r\n\r\n            <BrushTool\r\n              onDomainUpdate={brushUpdate}\r\n              margin={margin}\r\n              width={width}\r\n              height={height}\r\n              data={data}\r\n              domain={_xDomain}\r\n              orignXDomain={_orignXDomain}\r\n              isActive={_toolOption.brush}\r\n            />\r\n            <ZoomTool\r\n              onDomainUpdate={brushUpdate}\r\n              margin={margin}\r\n              width={width}\r\n              height={height}\r\n              data={data}\r\n              domain={_xDomain}\r\n              orignXDomain={_orignXDomain}\r\n              isActive={_toolOption.zoom}\r\n            />\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nSpectrumChart.propTypes = {\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  data: PropTypes.array.isRequired,\r\n  margin: PropTypes.shape({\r\n    top: PropTypes.number.isRequired,\r\n    right: PropTypes.number.isRequired,\r\n    bottom: PropTypes.number.isRequired,\r\n    left: PropTypes.number.isRequired\r\n  })\r\n};\r\n\r\nSpectrumChart.defaultProps = {\r\n  width: 800,\r\n  height: 800,\r\n  data: [],\r\n  margin: { top: 40, right: 40, bottom: 40, left: 40 }\r\n};\r\n\r\nexport default SpectrumChart;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SpectrumChart from './component/spectrum-chart';\n// import json from './component/test.json';\nimport json2 from './samples/test2.json';\nimport json1 from './samples/test1.json';\n\nfunction App() {\n  \n  //  console.log(json);\n\n  const width = 650;\n  const height = 400;\n  const margin = { top: 20, right: 40, bottom: 40, left: 40 };\n  \n   const data = [\n    // array of spectra. They will share the same axis\n    // each series is a React component in the SVG dom\n    // if a series has to be rerender a new object in the array is created\n    {\n      id: \"2\",\n      isHover: false,\n      ...json1,\n      color: undefined, // an array of colors for each segment of line. Use always modulo color.length to get the color\n      isFid: true, // allows to determine the label of the axis\n      is2D: false, // TODO: need to define where to put the spectrum if it is 1D\n      color: \"green\"\n    },\n    // {\n    //   id: \"5\",\n    //   isHover: false,\n      \n    //   color: undefined, // an array of colors for each segment of line. Use always modulo color.length to get the color\n    //   ...json2,\n\n    //   isFid: true, // allows to determine the label of the axis\n    //   is2D: false, // TODO: need to define where to put the spectrum if it is 1D\n    //   color: \"red\"\n    // }\n  ];\n\n\n\n  return (\n    <div className=\"App\">\n\n      <SpectrumChart  width={width} height={height} data={data} margin={margin}  updateRange={(d)=>{console.log(d)}}/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}